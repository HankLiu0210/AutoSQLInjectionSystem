# update_vulnerability_categories.py
from app import create_app, db
from app.models.cve import CVE, VulnerabilityType
from sqlalchemy import text

def update_vulnerability_categories():
    """更新CVE记录的漏洞类型分类"""
    app = create_app()
    with app.app_context():
        # 获取所有漏洞类型
        vulnerability_types = VulnerabilityType.query.all()
        type_map = {vt.type_name: vt.category_id for vt in vulnerability_types}
        
        # 更新SQL注入类型
        sql_injection_id = type_map.get('SQL Injection')
        if sql_injection_id:
            # 更新is_sql_injection为True的记录
            CVE.query.filter_by(is_sql_injection=True).update({
                'vulnerability_category': sql_injection_id
            })
        
        # 根据描述中的关键词更新其他类型
        keyword_type_map = {
            'SQL Injection': ['sql injection', 'sql注入'],
            'Cross-Site Scripting': ['xss', 'cross-site scripting', '跨站脚本'],
            'Remote Code Execution': ['rce', 'remote code execution', '远程代码执行'],
            'Buffer Overflow': ['buffer overflow', '缓冲区溢出'],
            'Path Traversal': ['path traversal', '路径遍历'],
            'Denial of Service': ['dos', 'denial of service', '拒绝服务'],
            'Cross-Site Request Forgery': ['csrf', 'cross-site request forgery', '跨站请求伪造'],
            'Server-Side Request Forgery': ['ssrf', 'server-side request forgery', '服务器端请求伪造'],
            'XML External Entity': ['xxe', 'xml external entity', 'xml外部实体'],
            'File Upload': ['file upload', '文件上传']
        }
        
        # 遍历每个CVE记录
        cves = CVE.query.all()
        update_count = 0
        
        for cve in cves:
            if cve.vulnerability_category is not None:
                continue
                
            desc_lower = (cve.description or '').lower()
            type_lower = (cve.vulnerability_type or '').lower()
            
            # 检查描述和漏洞类型字段中的关键词
            for type_name, keywords in keyword_type_map.items():
                if any(keyword in desc_lower or keyword in type_lower for keyword in keywords):
                    category_id = type_map.get(type_name)
                    if category_id:
                        cve.vulnerability_category = category_id
                        update_count += 1
                        break
        
        try:
            db.session.commit()
            print(f"Successfully updated {update_count} CVE records")
        except Exception as e:
            db.session.rollback()
            print(f"Error updating CVE records: {str(e)}")

if __name__ == '__main__':
    update_vulnerability_categories()
