from app import create_app, db
from app.models.cve import VulnerabilityType
from sqlalchemy import text

def init_vulnerability_types():
    """初始化漏洞类型表和数据"""
    app = create_app()
    with app.app_context():
        # 先删除已存在的表（如果有的话）
        db.session.execute(text('DROP TABLE IF EXISTS vulnerability_types'))
        db.session.commit()
        
        # 创建新表
        db.create_all()
        
        # 初始化数据
        types = [
            {
                'type_name': 'SQL Injection',
                'type_code': 'SQLi',
                'description': 'SQL注入漏洞'
            },
            {
                'type_name': 'Cross-Site Scripting',
                'type_code': 'XSS',
                'description': '跨站脚本漏洞'
            },
            {
                'type_name': 'Remote Code Execution',
                'type_code': 'RCE',
                'description': '远程代码执行漏洞'
            },
            {
                'type_name': 'Buffer Overflow',
                'type_code': 'BOF',
                'description': '缓冲区溢出漏洞'
            },
            {
                'type_name': 'Path Traversal',
                'type_code': 'PT',
                'description': '路径遍历漏洞'
            },
            {
                'type_name': 'Denial of Service',
                'type_code': 'DoS',
                'description': '拒绝服务漏洞'
            },
            {
                'type_name': 'Cross-Site Request Forgery',
                'type_code': 'CSRF',
                'description': '跨站请求伪造漏洞'
            },
            {
                'type_name': 'Server-Side Request Forgery',
                'type_code': 'SSRF',
                'description': '服务器端请求伪造漏洞'
            },
            {
                'type_name': 'XML External Entity',
                'type_code': 'XXE',
                'description': 'XML外部实体注入漏洞'
            },
            {
                'type_name': 'File Upload',
                'type_code': 'FU',
                'description': '文件上传漏洞'
            }
        ]
        
        for type_data in types:
            vuln_type = VulnerabilityType(**type_data)
            db.session.add(vuln_type)
        
        try:
            db.session.commit()
            print("Successfully initialized vulnerability types")
        except Exception as e:
            db.session.rollback()
            print(f"Error initializing vulnerability types: {str(e)}")

if __name__ == '__main__':
    init_vulnerability_types()
